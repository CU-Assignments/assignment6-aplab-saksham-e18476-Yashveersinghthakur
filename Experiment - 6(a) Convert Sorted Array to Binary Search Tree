#include <iostream>
#include <vector>

using namespace std;

// Definition for a binary tree node.
struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode() : val(0), left(nullptr), right(nullptr) {}
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
    TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
};

TreeNode* sortedArrayToBST(vector<int>& nums) {
    return helper(nums, 0, nums.size() - 1);
}

TreeNode* helper(vector<int>& nums, int left, int right) {
    if (left > right) return nullptr;

    // Middle element to maintain balance
    int mid = left + (right - left) / 2;
    TreeNode* node = new TreeNode(nums[mid]);
    
    // Recursively construct the left and right subtrees
    node->left = helper(nums, left, mid - 1);
    node->right = helper(nums, mid + 1, right);
    
    return node;
}

// Helper function to print the BST in inorder traversal
void inorderPrint(TreeNode* root) {
    if (root == nullptr) return;
    inorderPrint(root->left);
    cout << root->val << " ";
    inorderPrint(root->right);
}

int main() {
    vector<int> nums = {-10, -3, 0, 5, 9};
    TreeNode* root = sortedArrayToBST(nums);
    inorderPrint(root);  // Output the inorder traversal of the BST
    return 0;
}
